<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:bs="bluespot.controls.*" initialize="initializeHandler(event);" creationComplete="creationCompleteListener(event);">
	<mx:title>Connect to Server</mx:title>
	<mx:horizontalAlign>center</mx:horizontalAlign>
	<mx:Style>
		.error {
			font-weight:bold;
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			
			import mx.collections.ICollectionView;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.collections.ListCollectionView;
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			
			import mx.events.ValidationResultEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import mx.core.IButton;
			import mx.managers.IFocusManagerComponent;
			import mx.messaging.AbstractConsumer;
			import mx.controls.Alert;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;
			
			import bluespot.events.ConnectionErrorEvent;
			import bluespot.net.Server;
			import bluespot.events.ServerSelectorEvent;
			import bluespot.managers.ServerAccountManager;
			import bluespot.net.ServerAccount;
			
			public static const STATE_CONNECTED:String = "Connected";
			
			private var serverAccountManager:ServerAccountManager;
			private var cursor:IViewCursor;
			private var statusError:String;
			private var watchers:Array;
			
			private function initializeHandler(e:Event):void {
				// Get a private instance of the ServerAccountManager
				this.serverAccountManager = ServerAccountManager.getInstance();
				// Every time we change servers, we need to load up a new set of settings from the ServerAccount.
				var serverList:ListCollectionView = new ListCollectionView();
				serverList.sort = new Sort();
				serverList.sort.fields = [new SortField("lastConnected", false, true)];
				BindingUtils.bindProperty(serverList, "list", this.serverAccountManager, "rawSourceList");
				serverList.refresh();				
				this.serverNameField.dataProvider = serverList;
				var serverNameField:EditableComboBox = this.serverNameField;
				this.callLater(function():void {
					if(serverList.length)
						serverNameField.selectedIndex = 0;
				});
				BindingUtils.bindSetter(this.serverNameListener, this.serverNameField, "text", true);
				BindingUtils.bindSetter(this.selectedListener, this.channelList, "selectedItem", true);
				this.addEventListener(KeyboardEvent.KEY_DOWN, this.keyListener);
				this.addEventListener(FocusEvent.FOCUS_IN, this.focusListener);
			}
			
			private function focusListener(e:FocusEvent):void {
				if(this.currentState === ServerSelector.STATE_CONNECTED || !this.focusManager)
					return;
				var component:UIComponent = this.focusManager.findFocusManagerComponent(e.target as InteractiveObject) as UIComponent;
				if(!component)
					return;
				if((this.isChildOf(component, this.serversForm) || component === this.connectionToggle) && this.quietValidate()) {
					this.setStatus("Press Enter or click 'Connect' to join this server.");
				} else if(this.isChildOf(component, this.channelsForm)) {
					this.setStatus("The channels you enter here will be joined once you connect.");
				}
				
			}
			
			private function creationCompleteListener(e:Event):void {
				this.serverNameField.setFocus();
				var textInput:TextInput = this.serverNameField.getTextInput();
				textInput.setSelection(textInput.length, textInput.length);
			}
			
			private var _serverAccount:ServerAccount;
			[Bindable]
			public function get serverAccount():ServerAccount {
				return this._serverAccount;	
			}
			
			public function set serverAccount(serverAccount:ServerAccount):void {
				this._serverAccount = serverAccount;
				if(!this._serverAccount)
					throw new Error("ServerAccount is falsy. (Cannot set serverAccount to null; it must be set to something.)");
				this.cursor = this.serverAccount.channels.createCursor();
				if(this.watchers) {
					for each(var watcher:ChangeWatcher in this.watchers) {
						watcher.unwatch();
					}
				}
				/* We intentionally omit serverName from being updated, since we use that as the key for our
					ServerAccounts. If it was binded as well, we'd never actually change servers, just modify
					the existing one. */
				this.watchers = [
					/* Bind any changes made in the ServerAccount to the fields. Since these update immediately on
						binding, we need to make sure the serverAccount binds to the fields first. */
					BindingUtils.bindProperty(this.serverPortField, "text", this.serverAccount, "serverPort"),
					BindingUtils.bindProperty(this.nicknameField, "text", this.serverAccount, "nickname"),
					//BindingUtils.bindProperty(this.serverAccount, "channels", this.channelList, "dataProvider")
					// Bind any changes made in the fields to the ServerAccount.
					BindingUtils.bindProperty(this.serverAccount, "serverPort", this.serverPortField, "text", true),
					BindingUtils.bindProperty(this.serverAccount, "nickname", this.nicknameField, "text", true),
					BindingUtils.bindProperty(this.channelList, "dataProvider", this.serverAccount, "channels")
				];
			}
			
		
			private function isChildOf(child:InteractiveObject, candidateParent:DisplayObjectContainer):Boolean {
				if(!child)
					return false;
				if(!child.parent)
					return false;
				if(child.parent === candidateParent)
					return true;
				return this.isChildOf(child.parent, candidateParent);
			}
			
			private function keyListener(e:KeyboardEvent):void {
				if(this.currentState === ServerSelector.STATE_CONNECTED)
					return;
				if(e.keyCode !== Keyboard.ENTER)
					return;
				var focused:InteractiveObject = InteractiveObject(
					this.focusManager ? this.focusManager.getFocus() : null
				);
				if(this.isChildOf(focused, this.serversForm) || focused === this.connectionToggle) { 
					e.preventDefault();
					this.toggleConnection();
				}
			}
			
			private function quietValidate():Boolean {
				var results:Array = [];
				for each(var validator:Validator in this.validators) {
					var result:ValidationResultEvent = validator.validate(null, true);
					if(!result || result.type !== ValidationResultEvent.VALID)
						results.push(result);
				}
				return results.length === 0;
			}
			
			private function serverNameListener(serverName:String):void {
				// Upon creation, our serverAccount will be undefined, so we test that here. Otherwise
				// it should always be some value (We enforce this in set serverAccount)
				if(this.serverAccount && this.serverAccount.serverName === serverName) {
					// No change since last time, so return silently.
					return;
				}
				// We don't use serverAccountManager's procure() because we may be 
				// making alot of trash Accounts that we wouldn't want save.d
				var fetchedServer:ServerAccount = this.serverAccountManager.peek(serverName) as ServerAccount;
				if(fetchedServer) {
					// It's a saved server, so use that directly.
					this.removeServerLink.enabled = true;
					this.serverAccount = fetchedServer;
				} else {
					// It's a new server, so make a new Account to match.
					this.removeServerLink.enabled = false;
					this.createNewAccount(true, serverName);	
				}
				
			}
			
			private function createNewAccount(preserveSettings:Boolean = false, serverName:String = null):void {
				var serverAccount:ServerAccount = new ServerAccount();
				if(preserveSettings) {
					serverAccount.nickname = this.nicknameField.text;
					serverAccount.serverName = serverName;
					serverAccount.serverPort = uint(this.serverPortField.text);
				} else {
					serverAccount.nickname = "Guest";
					serverAccount.serverName = "irc.example.net";
					serverAccount.serverPort = 6667;
					// We probably need to explicitly set the serverNameField's value here to our newly created name.
					// In cases where it was entered, this has no effect, but if we've deleted all our servers, it won't
					// update without an explicit call.
					this.serverNameField.text = serverAccount.serverName;
				}
				this.serverAccount = serverAccount;				
			}
			
			private function removeServer():void {
				var cursor:IViewCursor = this.serverAccountManager.getCursorFrom(this.serverAccount);
				if(cursor) {
					this.setStatus("The server, {0}, has been removed.", this.serverAccount.serverName);
					cursor.remove();
					if(cursor.current) {
						this.serverAccount = cursor.current as ServerAccount;
						return;
					}
				}
				// Otherwise, make a new, clean ServerAccount.
				this.createNewAccount();	
			}
			
			private function setStatus(status:String, ...rest):void {
				if(rest && rest.length)
					status = StringUtil.substitute(status, rest);
				this.clearStyle("fontWeight");
				this.statusLabel.styleName = "";
				this.statusLabel.text = status;
			}
			
			private function getStatus():String {
				return this.statusLabel.text;
			}
			
			private function setError(error:String, ...rest):void {
				this.setStatus(error, rest);
				this.statusLabel.styleName = "error";
			}
			
			//*** Monitoring Functions
			
			private var _monitor:Server;
			public function get monitor():Server {
				return this._monitor;	
			}
			
			public function set monitor(monitor:Server):void {
				if(this._monitor === monitor)
					return;
				if(this._monitor) {
					this._monitor.removeEventListener(Server.CONNECTION_CHANGE, this.connectionChangeListener);
					this._monitor.removeEventListener(Server.CONNECTION_ERROR, this.connectionErrorListener);
				}
				this._monitor = monitor;
				if(this._monitor) {
					this._monitor.addEventListener(Server.CONNECTION_CHANGE, this.connectionChangeListener);
					this._monitor.addEventListener(Server.CONNECTION_ERROR, this.connectionErrorListener);
					this.updateState(this.monitor);
				} else {
					this.currentState = null;
				}
			}
			
			private function updateState(server:Server):void {
				this.currentState = (server.connected || server.state === Server.CONNECTING) ?
					ServerSelector.STATE_CONNECTED :
					null;
			}
			
			private function toggleConnection():void {
				var event:ServerSelectorEvent;
				if(this.monitor)
					this.updateState(this.monitor);
				if(this.currentState === ServerSelector.STATE_CONNECTED) {
					event = new ServerSelectorEvent(ServerSelectorEvent.DISCONNECT, this.serverAccount, this.monitor);
					this.dispatchEvent(event);
					if(!event.isDefaultPrevented()) {
						this.monitor.disconnect();	
					}
				} else {
					var results:Array = Validator.validateAll(this.validators);
					if(results.length)
						return;
					this.serverAccountManager.insert(this.serverAccount, true);
					event = new ServerSelectorEvent(ServerSelectorEvent.CONNECT, this.serverAccount, this.serverAccount.createServer());
					this.dispatchEvent(event);
					if(!event.isDefaultPrevented()) {
						this.monitor = event.server;
						this.monitor.connect();
					}
					(this.serverNameField.dataProvider as ICollectionView).refresh();
				}
			}
			
			private function connectionChangeListener(e:Event):void {
				var server:Server = e.currentTarget as Server;
				this.updateState(server);
				var statusText:String;
				switch(server.state) {
					case Server.DISCONNECTED:
						statusText = this.statusError ? ("Disconnected from '{0}' (Reason: '{1}')") : "";
						this.monitor = null;
						break;
					case Server.INITIALIZING:
						statusText = "";
						this.monitor = null;
						break;
					case Server.CONNECTING:
						statusText = "Connecting to '{0}' ..."
						this.statusError = "";
						break;					
					case Server.CONNECTED:
						statusText = "Connected to '{0}'";
						var event:ServerSelectorEvent = new ServerSelectorEvent(ServerSelectorEvent.JOIN_CHANNELS, this.serverAccount, server);
						this.dispatchEvent(event);
						if(!event.isDefaultPrevented()) {
							for each(var channel:String in this.serverAccount.channels)
								server.joinChannel(channel);
						}
						break;
					case Server.AUTHENTICATING:
						statusText = "Authenticating with '{0}' ...";
						break;
					case Server.DISCONNECTING:
						statusText = "Disconnecting from '{0}' ...";
						break;
					default:
						throw new Error("Unsupported connection state '" + server.state + "'");					
				}
				this.statusLabel.text = StringUtil.substitute(statusText,
					server.serverName + ":" + server.serverPort,
					this.statusError
				);
				this.statusError = null;
			}
			
			private function connectionErrorListener(e:ConnectionErrorEvent):void {
				this.statusError = e.text;
			}
			
			//** Channel List Functions
			
			private function selectedListener(selectedItem:Object):void {
				this.removeChannelButton.enabled = !!selectedItem;
				if(selectedItem)
					this.channelField.text = String(selectedItem);
			}
			
			private function itemEditBegin(e:ListEvent):void {
				
			}
			
			private function itemEditEnd(e:ListEvent):void {
				var editor:TextInput = TextInput(this.channelList.itemEditorInstance);
				itemEditorValidator.source = editor;
				var result:ValidationResultEvent = itemEditorValidator.validate();
				if(result.type == ValidationResultEvent.INVALID)
					e.preventDefault();
			}
			
			private function addChannel():void {
				if(!this.channelField.text || this.channelField.text.match(/^\s*$/))
					return;
				var channel:String = this.channelField.text;
				if(!this.cursor.findAny(channel)) {
					this.cursor.insert(channel);
					this.cursor.findAny(channel);
					this.channelField.text = "";
					this.setStatus("The channel, {0}, was added.", channel);
				} else {
					this.setError("The channel, {0}, is already on the channels list.", channel);
				}
				this.channelList.selectedItem = this.cursor.current;				
			}
			
			private function removeChannel():void {
				if(this.cursor.findAny(this.channelList.selectedItem))
					this.setStatus("The channel, {0}, was removed.", this.channelList.selectedItem);
					this.cursor.remove();
					this.channelList.selectedItem = this.cursor.current;
			}
			
		]]>
	</mx:Script>
	<mx:RegExpValidator id="itemEditorValidator" expression="\S+" property="text"/>
	<mx:states>
		<mx:State name="Connected">
			<mx:SetProperty target="{connectionToggle}" name="label" value="Disconnect"/>
			<mx:SetProperty target="{channelsForm}" name="enabled" value="{false}"/>
			<mx:SetProperty target="{serversForm}" name="enabled" value="{false}"/>
		</mx:State>
	</mx:states>
	<mx:HBox backgroundColor="#FFFFFF" backgroundAlpha="0.49" verticalAlign="middle">		
		<mx:Form id="serversForm" backgroundAlpha="0.0">
			<mx:FormHeading label="1. Server Information"/>
			<mx:FormItem label="Server Name" width="100%">
				<mx:toolTip>Choose or enter your IRC server.</mx:toolTip>
				<bs:EditableComboBox id="serverNameField" editable="true" width="100%" labelField="name" text="irc.example.net"/>
			</mx:FormItem>
			<mx:FormItem label="Server Port">
				<mx:toolTip>Enter the port number of the server you're connecting to. If you don't know, just keep it at 6667.</mx:toolTip>
				<mx:TextInput id="serverPortField" maxChars="4" restrict="0-9" text="6667"/>
			</mx:FormItem>
			<mx:FormHeading label="2. Your Information"/>
			<mx:FormItem label="Nickname" width="100%" toolTip="Enter the name you want others to know you by. You can change this at any time while connected.">
				<mx:TextInput id="nicknameField" text="Guest" editable="true" width="100%"/>
			</mx:FormItem>
			<mx:LinkButton id="removeServerLink" label="Remove Server" toolTip="Remove this server and its settings from your list of saved servers." enabled="false" click="this.removeServer();" width="100%" tabEnabled="false"/>
		</mx:Form>
		<mx:VRule height="95%" width="1"/>
		
		<mx:Form id="channelsForm" indicatorGap="0">
			<mx:FormHeading label="3. Channels to Join" textAlign="center" width="100%" color="#0B333C"/>
			<mx:FormItem direction="horizontal">
				<mx:TextInput id="channelField" width="100%" enter="addChannel();">
					<mx:toolTip>Enter each channel you want to join to once you connect. For keyed channels, just enter them like any other channel, and you'll be asked once you join.</mx:toolTip>
				</mx:TextInput>
				<mx:Button label="Add" click="addChannel();">
					<mx:toolTip>Add this entered channel to the 'Channels to Join' list.</mx:toolTip>
				</mx:Button>	
			</mx:FormItem>
			<mx:List id="channelList" labelField="name" width="100%" verticalScrollPolicy="{mx.core.ScrollPolicy.ON}" itemEditBegin="itemEditBegin(event);" itemEditEnd="itemEditEnd(event);"/>
			<mx:FormItem width="100%" horizontalAlign="center">
				<mx:LinkButton id="removeChannelButton" label="Remove Channel" enabled="false" color="#0B333C" click="removeChannel();" tabEnabled="false"/>
			</mx:FormItem>
		</mx:Form>
	</mx:HBox>
	<mx:ControlBar>
		<mx:Label id="statusLabel" width="100%" fontSize="11"/>	
		<mx:Button id="connectionToggle" label="Connect" click="this.toggleConnection()"/>
	</mx:ControlBar>
	<mx:Array id="validators">
		<mx:Validator id="userNameValidator" source="{nicknameField}" property="text" required="true" requiredFieldError="A nickname must be provided."/>
		<mx:Validator id="serverNameValidator" source="{serverNameField}" property="text" required="true" requiredFieldError="A server name must be provided. (e.g., irc.sorcery.net)"/>
		<mx:NumberValidator id="serverPortValidator" source="{serverPortField}" property="text" minValue="1025" lowerThanMinError="The port provided must be greater than 1024."/>
	</mx:Array>
</mx:Panel>